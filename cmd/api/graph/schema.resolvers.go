package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/calloc134/golang-ddd-test/cmd/api/graph/model"
)

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := r.Resolver.UserApplication.NewUser(ctx, input.Name, input.Age)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID,
		Name: user.UserDetail.Name,
		Age:  user.UserDetail.Age,
	}, nil
}

// UpdateNameByUlid is the resolver for the updateNameByUlid field.
func (r *mutationResolver) UpdateNameByUlid(ctx context.Context, ulid string, name string) (*model.User, error) {
	user, err := r.Resolver.UserApplication.UpdateNameByUlid(ctx, ulid, name)

	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID,
		Name: user.UserDetail.Name,
		Age:  user.UserDetail.Age,
	}, nil
}

// UpdateAgeByUlid is the resolver for the updateAgeByUlid field.
func (r *mutationResolver) UpdateAgeByUlid(ctx context.Context, ulid string, age int) (*model.User, error) {
	user, err := r.Resolver.UserApplication.UpdateAgeByUlid(ctx, ulid, age)

	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID,
		Name: user.UserDetail.Name,
		Age:  user.UserDetail.Age,
	}, nil
}

// DeleteUserByUlid is the resolver for the deleteUserByUlid field.
func (r *mutationResolver) DeleteUserByUlid(ctx context.Context, ulid string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUserByUlid - deleteUserByUlid"))
}

// FindAllUsers is the resolver for the findAllUsers field.
func (r *queryResolver) FindAllUsers(ctx context.Context) ([]*model.User, error) {
	result, err := r.Resolver.UserApplication.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	users := []*model.User{}

	for _, user := range result {
		users = append(users, &model.User{
			Ulid: user.ULID,
			Name: user.UserDetail.Name,
			Age:  user.UserDetail.Age,
		})
	}

	return users, nil
}

// FindUserByUlid is the resolver for the findUserByUlid field.
func (r *queryResolver) FindUserByUlid(ctx context.Context, ulid string) (*model.User, error) {
	result, err := r.Resolver.UserApplication.FindByUlid(ctx, ulid)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: result.ULID,
		Name: result.UserDetail.Name,
		Age:  result.UserDetail.Age,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
