package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/calloc134/golang-ddd-test/cmd/api/graph/model"
)

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := r.Resolver.UserApplication.NewUser(ctx, input.Name, input.Age)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID.String(),
		Name: user.UserDetail.Name.String(),
		Age:  user.UserDetail.Age.Int(),
	}, nil
}

// UpdateNameByUlid is the resolver for the updateNameByUlid field.
func (r *mutationResolver) UpdateNameByUlid(ctx context.Context, ulid string, name string) (*model.User, error) {
	user, err := r.Resolver.UserApplication.UpdateNameByUlid(ctx, ulid, name)

	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID.String(),
		Name: user.UserDetail.Name.String(),
		Age:  user.UserDetail.Age.Int(),
	}, nil
}

// UpdateAgeByUlid is the resolver for the updateAgeByUlid field.
func (r *mutationResolver) UpdateAgeByUlid(ctx context.Context, ulid string, age int) (*model.User, error) {
	user, err := r.Resolver.UserApplication.UpdateAgeByUlid(ctx, ulid, age)

	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: user.ULID.String(),
		Name: user.UserDetail.Name.String(),
		Age:  user.UserDetail.Age.Int(),
	}, nil
}

// DeleteUserByUlid is the resolver for the deleteUserByUlid field.
func (r *mutationResolver) DeleteUserByUlid(ctx context.Context, ulid string) (*model.User, error) {
	// TODO: 実装する
	panic(fmt.Errorf("not implemented: DeleteUserByUlid - deleteUserByUlid"))
}

// NewPost is the resolver for the newPost field.
func (r *mutationResolver) NewPost(ctx context.Context, userUlid string, title string, content string) (*model.Post, error) {
	post, err := r.Resolver.PostApplication.NewPost(ctx, userUlid, title, content)

	if err != nil {
		return nil, err
	}

	return &model.Post{
		Ulid:    post.ULID.String(),
		Title:   post.PostDetail.Title.String(),
		Content: post.PostDetail.Content.String(),
	}, nil
}

// UpdateTitleByUlid is the resolver for the updateTitleByUlid field.
func (r *mutationResolver) UpdateTitleByUlid(ctx context.Context, ulid string, title string) (*model.Post, error) {
	post, err := r.Resolver.PostApplication.UpdateTitleByUlid(ctx, ulid, title)

	if err != nil {
		return nil, err
	}

	return &model.Post{
		Ulid:    post.ULID.String(),
		Title:   post.PostDetail.Title.String(),
		Content: post.PostDetail.Content.String(),
	}, nil
}

// UpdateContentByUlid is the resolver for the updateContentByUlid field.
func (r *mutationResolver) UpdateContentByUlid(ctx context.Context, ulid string, content string) (*model.Post, error) {
	post, err := r.Resolver.PostApplication.UpdateContentByUlid(ctx, ulid, content)

	if err != nil {
		return nil, err
	}

	return &model.Post{
		Ulid:    post.ULID.String(),
		Title:   post.PostDetail.Title.String(),
		Content: post.PostDetail.Content.String(),
	}, nil
}

// DeletePostByUlid is the resolver for the deletePostByUlid field.
func (r *mutationResolver) DeletePostByUlid(ctx context.Context, ulid string) (*model.Post, error) {
	// TODO: 実装する
	panic(fmt.Errorf("not implemented: DeletePostByUlid - deletePostByUlid"))
}

// FindAllUsers is the resolver for the findAllUsers field.
func (r *queryResolver) FindAllUsers(ctx context.Context) ([]*model.User, error) {
	result, err := r.Resolver.UserApplication.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	users := []*model.User{}

	for _, user := range result {
		users = append(users, &model.User{
			Ulid: user.ULID.String(),
			Name: user.UserDetail.Name.String(),
			Age:  user.UserDetail.Age.Int(),
		})
	}

	return users, nil
}

// FindUserByUlid is the resolver for the findUserByUlid field.
func (r *queryResolver) FindUserByUlid(ctx context.Context, ulid string) (*model.User, error) {
	result, err := r.Resolver.UserApplication.FindByUlid(ctx, ulid)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Ulid: result.ULID.String(),
		Name: result.UserDetail.Name.String(),
		Age:  result.UserDetail.Age.Int(),
	}, nil
}

// FindAllPosts is the resolver for the findAllPosts field.
func (r *queryResolver) FindAllPosts(ctx context.Context) ([]*model.Post, error) {
	result, err := r.Resolver.PostApplication.FindAll(ctx)
	if err != nil {
		return nil, err
	}

	posts := []*model.Post{}

	for _, post := range result {
		posts = append(posts, &model.Post{
			Ulid:    post.ULID.String(),
			Title:   post.PostDetail.Title.String(),
			Content: post.PostDetail.Content.String(),
		})
	}

	return posts, nil
}

// FindPostByUlid is the resolver for the findPostByUlid field.
func (r *queryResolver) FindPostByUlid(ctx context.Context, ulid string) (*model.Post, error) {
	result, err := r.Resolver.PostApplication.FindByUlid(ctx, ulid)

	if err != nil {
		return nil, err
	}

	return &model.Post{
		Ulid:    result.ULID.String(),
		Title:   result.PostDetail.Title.String(),
		Content: result.PostDetail.Content.String(),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
